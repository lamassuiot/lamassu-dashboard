name: "Release Workflow"

on:
  workflow_dispatch:
    inputs:
      release_version:
        type: string
        description: release version when building docker containers (example; 2.0.0)

run-name: >-
  ${{ format('Release {0}', github.event.inputs.release_version) }}
        
jobs:
  build_aws_connector_docker_image:
    name: Release docker images
    runs-on: ubuntu-latest
    steps:        
    - name: Login to Github Registry
      uses: docker/login-action@v3
      with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Build Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        build-args: |
          SHA1VER=${{ env.SHA1VER }}
          VERSION=${{ github.event.inputs.release_version }}
        tags: |
            ghcr.io/lamassuiot/lamassu-ui:${{ github.event.inputs.release_version }}
            ghcr.io/lamassuiot/lamassu-ui:latest
        push: true
      
    - name: Create tag
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.git.createRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: 'refs/tags/${{ github.event.inputs.release_version }}',
            sha: context.sha
          })

    - name: Generate Release Changelog
      id: changelog
      uses: mikepenz/release-changelog-builder-action@v4
      with:
        configuration: '.github/changelog-configuration.json'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Release
      id: create_release
      uses: actions/create-release@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event.inputs.release_version }}
        release_name: Release v${{ github.event.inputs.release_version }}
        body: ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: false

    - name: Build project
      run: npm ci && npm run build

    - name: Zip out folder
      run: |
        if [ -d "out" ]; then
          zip -r release.zip out
        else
          echo "No out folder found to zip."
        fi

    - name: Upload Release Asset
      uses: softprops/action-gh-release@v1
      if: success()
      with:
        tag_name: ${{ github.event.inputs.release_version }}
        files: release.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}